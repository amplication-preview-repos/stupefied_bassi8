/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Watch } from "./Watch";
import { WatchCountArgs } from "./WatchCountArgs";
import { WatchFindManyArgs } from "./WatchFindManyArgs";
import { WatchFindUniqueArgs } from "./WatchFindUniqueArgs";
import { CreateWatchArgs } from "./CreateWatchArgs";
import { UpdateWatchArgs } from "./UpdateWatchArgs";
import { DeleteWatchArgs } from "./DeleteWatchArgs";
import { WatchService } from "../watch.service";
@graphql.Resolver(() => Watch)
export class WatchResolverBase {
  constructor(protected readonly service: WatchService) {}

  async _watchesMeta(
    @graphql.Args() args: WatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Watch])
  async watches(@graphql.Args() args: WatchFindManyArgs): Promise<Watch[]> {
    return this.service.watches(args);
  }

  @graphql.Query(() => Watch, { nullable: true })
  async watch(
    @graphql.Args() args: WatchFindUniqueArgs
  ): Promise<Watch | null> {
    const result = await this.service.watch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Watch)
  async createWatch(@graphql.Args() args: CreateWatchArgs): Promise<Watch> {
    return await this.service.createWatch({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Watch)
  async updateWatch(
    @graphql.Args() args: UpdateWatchArgs
  ): Promise<Watch | null> {
    try {
      return await this.service.updateWatch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Watch)
  async deleteWatch(
    @graphql.Args() args: DeleteWatchArgs
  ): Promise<Watch | null> {
    try {
      return await this.service.deleteWatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
